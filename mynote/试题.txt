获取 url 中的参数
1. 指定参数名称，返回该参数的值 或者 空字符串
2. 不指定参数名称，返回全部的参数对象 或者 {}
3. 如果存在多个同名参数，则返回数组 
输入例子:
getUrlParam('http://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe', 'key')

输出例子:
[1, 2, 3]

function getUrlParam(sUrl, sKey) {
  var result={};
  sUrl.replace(/\??(\w+)=(\w+)&?/g,function(a,k,v){ 
      if(result[k]){
          var t=result[k];
          result[k]=[].concat(t,v);
      } else {
          result[k]=v;
      }
  });
    
  if(sKey){
      return result[sKey] || '';
  } else {
      return result || {};
  }
}

function getUrlParam(sUrl, sKey) {
			    var paramStr=sUrl.slice(sUrl.indexOf('?')+1, sUrl.indexOf('#'));
			    var paramArr=paramStr.split('&');
			    var keyObj={};
			     
			    for(var i=0,len=paramArr.length; i < len;i++){
			        (function(i){
			            var k=paramArr[i].slice(0,paramArr[i].indexOf('=')),
			                v=paramArr[i].slice(paramArr[i].indexOf('=')+1); 
			            
			            if(keyObj[k]){
			            	var t=keyObj[k];
			            	keyObj[k]=[].concat(t,v);
			            } else {
							keyObj[k]=v;
			            }
			            
			        })(i)
			    }
			   if(sKey){
			   	return keyObj[sKey] || '';
			   } else {
                   return keyObj || {};
			   }
			}

题目描述
按所给的时间格式输出指定的时间
格式说明
对于 2014.09.05 13:14:20
yyyy: 年份，2014
yy: 年份，14
MM: 月份，补满两位，09
M: 月份, 9
dd: 日期，补满两位，05
d: 日期, 5
HH: 24制小时，补满两位，13
H: 24制小时，13
hh: 12制小时，补满两位，01
h: 12制小时，1
mm: 分钟，补满两位，14
m: 分钟，14
ss: 秒，补满两位，20
s: 秒，20
w: 星期，为 ['日', '一', '二', '三', '四', '五', '六'] 中的某一个，本 demo 结果为 五 
输入例子:
formatDate(new Date(1409894060000), 'yyyy-MM-dd HH:mm:ss 星期w')

输出例子:
2014-09-05 13:14:20 星期五



方法一, 分组替换
function formatDate(t,str){  

var obj = {
    yyyy:t.getFullYear(),
    yy:(""+ t.getFullYear()).slice(-2),
    M:t.getMonth()+1,
    MM:("0"+ (t.getMonth()+1)).slice(-2),
    d:t.getDate(),
    dd:("0" + t.getDate()).slice(-2),
    H:t.getHours(),
    HH:("0" + t.getHours()).slice(-2),
    h:t.getHours() % 12,
    hh:("0"+t.getHours() % 12).slice(-2),
    m:t.getMinutes(),
    mm:("0" + t.getMinutes()).slice(-2),
    s:t.getSeconds(),
    ss:("0" + t.getSeconds()).slice(-2),
    w:['日', '一', '二', '三', '四', '五', '六'][t.getDay()]  
};  
return str.replace(/([a-z]+)/ig,function($1){return obj[$1]});}

方法二，
function formatDate(oDate, sFormation) {
    var weeks=['日', '一', '二', '三', '四', '五', '六'];
    var res;
    
    var yy=oDate.getFullYear(),
        mth=oDate.getMonth()+1,
        dd=oDate.getDate(),
        hh=oDate.getHours(),
    	mm=oDate.getMinutes(),
        ss=oDate.getSeconds(),
    	ww=oDate.getDay();
    
   //格式化日期，补位
    var dFormat=function(date,format){
			return format.length==2 && date<10?'0'+date:date;
	     };

    res=sFormation.replace(/(y{2}){1,2}/,function(y){
                    y=y.length==2?yy.toString().slice(2):yy;
                    return y;
                })
                .replace(/M{1,2}/,function(M){
                    return dFormat(mth,M);
                })
                .replace(/d{1,2}/,function(d){
                    return dFormat(dd,d);
                })
    			.replace(/[hH]{1,2}/,function(h){
 					if(h.indexOf('h')!=-1 && hh>12){
        				hh=hh-12;
    				}
    				return dFormat(hh,h);
    			})
    			.replace(/m{1,2}/,function(m){
                  	return dFormat(mm,m);  
                })
    			.replace(/s{1,2}/,function(s){
                    return dFormat(ss,s);
                })
    			.replace(/[w]/,function(w){
                    return weeks[ww];
                });
    return res; 
    
}

//分组查找
'yyyy-MM-dd HH:mm:ss'.replace(/[a-z]+/g,function($1){return 'test'});

// 数组indexOf方法 配合 lastIndexOf方法查找重复项，并输出重复项 	
function duplicates(arr) {
    var res=[];
    arr.forEach(function(item){
        if(arr.indexOf(item)!==arr.lastIndexOf(item) && res.indexOf(item)==-1){
            res.push(item);
        }
    })
    return res;
}	
	
//计时器
题目描述
实现一个打点计时器，要求
1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1
2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作
3、第一个数需要立即输出

function count(start, end) {
    console.log(start++);
	var timer=setInterval(function(){
        if(start<=end){
        	console.log(start++);    
        } else {
            clearInterval(timer);
        }
    },100);
    
    return {
        cancel:function(){clearInterval(timer);} 
    };
}

//函数传参
将数组 arr 中的元素作为调用函数 fn 的参数 
输入例子:
argsAsArray(function (greeting, name, punctuation) {return greeting + ', ' + name + (punctuation || '!');}, ['Hello', 'Ellie', '!'])

输出例子:
Hello, Ellie!

function argsAsArray(fn, arr) {
	return fn.apply(this,arr);
}

//改变函数的执行上下文 apply/call
题目描述
将函数 fn 的执行上下文改为 obj 对象 
输入例子:
speak(function () {return this.greeting + ', ' + this.name + '!!!';}, {greeting: 'Hello', name: 'Rebecca'})

输出例子:
Hello, Rebecca!!!

function speak(fn, obj) {
	return fn.call(obj);
}


//返回函数
实现函数 functionFunction，调用之后满足如下条件：
1、返回值为一个函数 f
2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 ', '
3、所有函数的参数数量为 1，且均为 String 类型 
输入例子:
functionFunction('Hello')('world')

输出例子:
Hello, world

function functionFunction(str) {
	var f=function(e){
        return str+', '+e;
    }；
    return f;
}

//使用闭包
题目描述
实现函数 makeClosures，调用之后满足如下条件：
1、返回一个函数数组 result，长度与 arr 相同
2、运行 result 中第 i 个函数，即 result[i]()，结果与 fn(arr[i]) 相同 
输入例子:
var arr = [1, 2, 3]; 
var square = function (x) { 
	return x * x; 
}; 
var funcs = makeClosures(arr, square); 
funcs[1]();

function makeClosures(arr, fn) {
	var result=[];
    for(var i=0,l=arr.length;i<l;i++){
        (function(i){
            result.push(
                function(){
                    return fn.call(null,arr[i])
                });
        })(i);
    }
    return result; 
}

题目描述
已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件：
1、返回一个函数 result，该函数接受一个参数
2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致 
输入例子:
var sayIt = function(greeting, name, punctuation) {     return greeting + ', ' + name + (punctuation || '!'); };  partial(sayIt, 'Hello', 'Ellie')('!!!');

输出例子:
Hello, Ellie!!!

function partial(fn, str1, str2) {
    var result=function(str){
        return fn.call(this,str1,str2,str);//固定执行三个参数，
        所以可以用call方法直接传入
    };
    return result;  
}
var a = 1; var b = 2; 
var test = function (first, second) { 
	return first === a && second === b;
}; 
callIt(test, a, b);

实现函数 partialUsingArguments，调用之后满足如下条件：
1、返回一个函数 result
2、调用 result 之后，返回的结果与调用函数 fn 的结果一致
3、fn 的调用参数为 partialUsingArguments 的第一个参数之后的全部参数以及 result 的调用参数 
输入例子:
var a = 1; var b = 2; var c = 3; var d = 4;var test = function (first, second, third, forth) {return first + second + third + forth;};partialUsingArguments(test, a, b)(c, d);

输出例子:
10

function partialUsingArguments(fn) {
    var arrs=Array.prototype.slice.call(arguments,1);
    var res=function(){
        return fn.apply(this,arrs.concat([].slice.call(arguments)));//用concat方法链接参数
    };
    return res;
}

字符串获取指定位置的字符有以下两种方法：
string[index];
string.charAt(index);



题目描述
将给定数字转换成二进制字符串。如果字符串长度不足 8 位，则在前面补 0 到满8位。 
输入例子:
convertToBinary(65)

输出例子:
01000001
=========================================================================

function convertToBinary(num) {
	var s=num.toString(2);
    var l=s.length;
    //return l<8?'0'.repeat(8-l)+s:s; repeat方法存在兼容性问题，  
    return l<8?(Math.pow(10, 8-l).toString().substring(1))+s:s;
}


题目描述
求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题 
输入例子:
multiply(3, 0.0001)

输出例子:
0.0003
===========================================================================
思路：
1.先将浮点数用10的n吃饭（Math.pow(10,n)）转换为整数再除以之前成的倍数。

function multiply(a, b) {
	var intNum=function(e){
        if(e.toString().indexOf('.')!==-1){
           return e.toString().split('.')[1].length; 
        } else {
            return 0;
        } 
    };
    
    var a1=a*Math.pow(10,intNum(a));
    var b1=b*Math.pow(10,intNum(b));
    
    return a1*b1/Math.pow(10,intNum(a)+intNum(b));
}


题目描述
给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。 
输入例子:
var C = function(name) {this.name = name; return this;}; var obj1 = new C('Rebecca'); alterObjects(C, 'What\'s up'); obj1.greeting;

输出例子:
What's up
=================================================================
function alterObjects(constructor, greeting) {
   return constructor.prototype.greeting=greeting //new 一个实例， 该实例的this指向构造器的原型链
}



题目描述
找出对象 obj 不在原型链上的属性(注意这题测试例子的冒号后面也有一个空格~)
1、返回数组，格式为 key: value
2、结果数组不要求顺序 
输入例子:
var C = function() {this.foo = 'bar'; this.baz = 'bim';}; C.prototype.bop = 'bip'; iterate(new C());

输出例子:
["foo: bar", "baz: bim"]

=================================================================
function iterate(obj) {
	var res=[];
    for (var i in obj){
       if(obj.hasOwnProperty(i)){ // hasOwnProperty()排除在原型链上的对象属性
           res.push(i+': '+obj[i]);
       }
    }
    return res;
}


题目描述
给定字符串 str，检查其是否包含数字，包含返回 true，否则返回 false 
输入例子:
containsNumber('abc123')

输出例子:
true
=======================================================
解题思路：
用正则表达式查看字符串是否包含数字

function containsNumber(str) {
	return /\d/.test(str);
}


题目描述
给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false 
输入例子:
containsRepeatingLetter('rattler')

输出例子:
true

=================================================================
解题思路
1：循环比较字符串中相邻两个数的值，如果相等并且是字母（a-zA-Z）则返回ture, 否则返回false;

方法一：
function containsRepeatingLetter(str) {
	 for(var i=0;i<str.length;i++){
         if(/[a-zA-Z]/.test(str[i]) && str[i]==str[i+1]){
             return true;
         }
     } 
    return false;
}

方法二：正则表达式的引用分组  \n
function containsRepeatingLetter(str){
	return /([a-zA-Z])\1/.test(str);
}

在正则表达式中，利用()进行分组，使用斜杠加数字表示引用，\1就是引用第一个分组，\2就是引用第二个分组。将[a-zA-Z]做为一个分组，然后引用，就可以判断是否有连续重复的字母。
e.g 
/([a-zA-Z])([0-9])\2/.test('a1122') true
/([a-zA-Z])([0-9])\1/.test('a1122') false
/([a-zA-Z])([0-9])\1/.test('a1a122') true


给定字符串 str，检查其是否符合美元书写格式
1、以 $ 开始
2、整数部分，从个位起，满 3 个数字用 , 分隔
3、如果为小数，则小数部分长度为 2
4、正确的格式如：$1,023,032.03 或者 $2.03，错误的格式如：$3,432,12.12 或者 $34,344.3 
输入例子:
isUSD('$20,933,209.93')

输出例子:
true
======================================================

function isUSD(str) {
  return /^\$([1-9]\d{0,2}(\,\d{3})*|0)(\.(\d){2})?$/.test(str);
}

^\$ 匹配开头为 $
[1-9]\d{0,2}(\,\d{3})*|0    整数组开头，可以是0或者不为0
(\.(\d){2})?$ 匹配结尾可以是两位的小数点或没有小数点
