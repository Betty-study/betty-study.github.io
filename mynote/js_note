setTimeout()方法用于在指定的毫秒数后调用函数或计算表达式。语法
setTimeout(code,millisec)

setTimeout(fun(), 2000); 加()立即执行fun表达式
setTimeout(fun,2000); 不加(),2秒后执行fun表达式


call()函数
语法：call(thisObj[,arg1[,arg2[....[argN]]]]);
定义：调用一个对像的方法，以另一个对象替换当前对象。

e.g
var obj={};
obj.log=console.log;
obj.log.call(console, this); //output: window;

解析： obj.log.call(console, this) = console.log.call(console, this)
输出切换的上下文console中的this, 即 window

函数
1.在Function类型里，函数是对象，函数名是指向函数对象的指针，没有重载
2.当声明了多个重名函数，后面的函数会覆盖前面的函数。
3.函数声明和函数表达式区别： 解析器在向执行环境中加载数据时，会先读取函数的声明。再读取函数的表达式
e.g
var a=1, y, z;
function add(n){
	return n=n+1;
}
y=add(a);
function add(n){
	return n=n+2;
}
z=add(a);

console(y,z) //4 4;


函数的调用方式
直接调用
实参处理：参数表达式运算结果作为实参传递给形参
调用上下文：指向全局变量
返回值: 1.没有执行到return返回undefined 
	    2.执行到return返回return之后的值
	    3.执行到return后没有值，返回undefined.

对象方法调用
实参处理：与直接调用模式一致
调用上下文：指向方法所属的对象
返回值：与直接调用模式一致

构造函数调用
实参处理：一般情况, 与直接调用模式一样； 如果构造函数没有形参，JS构造函数调用语法允许省略实参列表和圆括号的
调用上下文：指向新创建的对象
返回值：构造函数通常不使用return关键字，返回值就是新对象
		如果构造函数显示的使用return语句返回了一个对象，那么调用表达式值就为这个对象

间接调用
实参处理：call()方法使用它自有的实参列表作为函数的参数
         apply()方法要求以数组的形式传入参数
调用上下文：允许显示的调用所需的this值， call()或apply()将传入的第一个参数作为this值

valueOf()
定义：valueOf()方法用于返回指定对象的原始值
语法：Boolean.valueOf();

var a=new Boolean(false);
a.valueOf() //false



6.分析以下代码在浏览器中运行的结果：

var foo={n:1};                              
(function(foo){                         (function(foo){//形参foo和实参foo指向同一个n值为1的内存空间
											var foo;//变量声明会被提升到作用域顶端， 局部变优先级低于形参，可忽略					
	console.log(foo.n);                     console.log(foo.n); //输出1 
	foo.n=3;                      ====>     foo.n=3; //修改了形参foo和实参foo指向的n值为1的内存空间,n值变为3
	var foo={n:2};                          foo={n:2} //形参foo指向一个n值为2的新的内存空间
	console.log(foo.n);						console.log(foo.n)	//输出2									
})(foo);								})(foo);				

console.log(foo.n);//1,2,3              console.log(foo.n) //实参foo还是指向原来的内存空间，n值被修改为3



函数声明的优先级高于变量声明， 遇到同名变量会被忽略。
局部变量优先级低于形参

7. 回调的运行机制。
      被回调的函数会被放在event loop里，等待线程里的任务执行完后才执行event loop里面的代码
 	
8. js是运行在单线程环境中的，setTimeout作用是规定在指定时间后将事件加入执行队列。而加入的前提是当前队列里的任务都执行完了
  function foo(){
	console.log('first');
    setTimeout(function(){console.log('second')},5)
  }
  for(var i=0;i<499;i++){
  	foo();
  }
  
  output: 首先输出499个'first'， 然后全部输出'second';
  
9.引用类型和基本类型
  基本类型就是简单的数据段
 引用类型值是保存在内存中的，Js是不能直接访问内存，所以对于引用类型，操作的不是实际的对象而是对象的引用。
 
 引用类型
 1）动态属性
 	引用类型可以动态添加属性,基本类型不可以，虽然不会报错
 	var obj=new Object();
 	obj.name='betty';
 	
 	console.log(obj.name) //betty	
 	
 	
 2）复制值
       引用类型复制完成后的新值和之前的值都是引用同一个对象，所以之前的值改变也会影响复制后的值
    
    var obj=new Object();
    obj.name='betty';
    
    var obj2=obj;
    console.log(obj2); //betty
    
    obj.name='betty2'; 
    
    console.log(obj2.name) //betty2
    
    
    —————————————————
    |				|
    |				|
    
       
 3）函数传参
    JS中 函数传参都是按值传递的
    function setName(obj) { 
	    obj.name = 'zjzhome'; 
	    obj = new Object();
	    obj.name = 'zjz' 
	}
	var person = new Object()
	setName(person)
	console.log(person.name) // zjzhome 
    person的值并没有因为obj的修改而改变，说明不是按引用传递的。如果是按引用传递的，obj和person指向同一个对象，当obj改变，person也会改变。
 


10.对象分两种：一种是js内置对象，一种是宿主对象如window,Dom等
   1)js内置对象：
     Arguments -> 函数参数集合
     Array	   -> 数组对象
     Boolean   -> 布尔对象
     Date	   -> 日期对象
     Error     -> 异常对象
     Function  -> 函数构造器
     Math	   -> 数学对象
     Number    -> 数值对象
     Object    -> 基本对象
     RegExp    -> 正则表达式对象
     String    -> 字符串对象
     
11. RegExp 对象有三个方法：
	1)test():用来检测一个字符串中是否匹配某个正则表达式，如果匹配返回true,否则返回false
	2)exec():用来检索字符串中与正则表达式匹配的值。返回一个数组，其中存放匹配的结果，如果未找到匹配的值则返回null
	3)compile():可以在脚步执行的过程中编译正则表达式。也可以改变已有的表达式
	
12. 邮箱验证

function isAvailableEmail(sEmail) {
    var reg=/^\w+(\.\w+)*@(\w)+((\.\w+)+)$/;
    return reg.test(sEmail);
}

13.反向引用
(\(?!^)\-(\w)(w+)\)

题目描述
css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能
1. 以 - 为分隔符，将第二个起的非空单词首字母转为大写
2. -webkit-border-image 转换后的结果为 webkitBorderImage 
输入例子:
cssStyle2DomStyle('font-size')

输出例子:
fontSize

function cssStyle2DomStyle(sName) {
	return sName.replace(/(?!^)\-(\w)(\w+)/g,function(a,c,w){
        return c.toUpperCase()+w;
    }).replace(/\-/,'');
};

replace()方法于字符串的应用
题目描述
统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率
1. 不限制 key 的顺序
2. 输入的字符串参数不会为空
3. 忽略空白字符 
输入例子:
count('hello world')

输出例子:
{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}

function count(str){
 var o={}
 str.replace(/\S/g, function(w){
    !o[w]?o[w]=1:o[w]++;
 });
    
 return o;
}

14 机制转换
//十进制转16进制
var x=55;
x.toString(16)
x.toString(8)
x.toString(32)
//其它转10进制
var x='13';
parseInt(x,2);
pareseInt(x,8);
pareseInt(x,16);
//其它
//先用parseInt转成10进制，然后用toString转到目标进制

15
题目描述
将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff
1. rgb 中每个 , 后面的空格数量不固定
2. 十六进制表达式使用六位小写字母
3. 如果输入不符合 rgb 格式，返回原始输入 
输入例子:
rgb2hex('rgb(255, 255, 255)')
===================================
// 
输出例子:
#ffffff

function rgb2hex(sRGB) {
    var arr=['#'];
    var reg=/^rgb\((\d){1,3}\,\s*(\d){1,3}\,\s*(\d){1,3}\)$/;
    var flag;
    
    
    if(reg.test(sRGB)){
        sRGB.replace(/(\d+)/g,function(s,n){
             var num= Number(n);
             if(num>=0 && num<=255){
                 flag=true;
                 n=num.toString(16);
                 n=(n.length==1)?(0+n):n;
                 arr.push(n);    
             }
             else {
                 flag=false;
             }
         }); 
        return flag ? arr.join(''):sRGB
    } else {
        return sRGB;
    }   
}

function rgb2hex(sRGB) {
    var re= /rgb\((\d+),\s*(\d+),\s*(\d+)\)/;
 	var res="#";
    if(re.test(sRGB)){
        var _numList = re.exec(sRGB); 
        for(var i=1;i<4;i++){
            var num=parseInt(_numList[i]);
            if(num>=0 && num<=255){
                res+=(num<16?'0'+num.toString(16):num.toString(16));
            } else {
                return sRGB;
            }
        }
        return res;
        
    } else {
        return sRGB;
    }
}

16. new Date()
日期对象
	日期参数形式有以下五种
	new Date('month dd,yyyy hh:mm:ss');
	new Date('month dd,yyyy');
	new Date('yyyy,mth,dd,mm,ss') //参数一定要是整型
	new Date(yyy,mth,dd);
	new Date(ms);参数表示的是需要创建的时间和 GMT时间1970年1月1日之间相差的毫秒数
	
	各参数含义：
	month:用英文 表示月份名称，从January到December
	mth:用整数表示月份，从0(1月)到11（12月）；
	dd:表示一个月中的第几天，从1到31；
	yyyy:四位数表示年份
	hh：小时数，从0（午夜）到23（晚11点）
	mm:分钟数，从0到59的整数
	ss:秒数，从0到59的整数
	ms:毫秒数，为大于等于0的整数 
	
	如：
	new Date("January 12,2006 22:19:35"); 
	new Date("January 12,2006"); 
	new Date(2006,0,12,22,19,35); 
	new Date(2006,0,12); 
	new Date(1137075575000); 
	上面的各种创建形式都表示2006　年1月12日这一天。
	
	链接：https://www.nowcoder.com/questionTerminal/a789783e7c984f10a0bf649f6d4e2d59


题目描述
按所给的时间格式输出指定的时间
格式说明
对于 2014.09.05 13:14:20
yyyy: 年份，2014
yy: 年份，14
MM: 月份，补满两位，09
M: 月份, 9
dd: 日期，补满两位，05
d: 日期, 5
HH: 24制小时，补满两位，13
H: 24制小时，13
hh: 12制小时，补满两位，01
h: 12制小时，1
mm: 分钟，补满两位，14
m: 分钟，14
ss: 秒，补满两位，20
s: 秒，20
w: 星期，为 ['日', '一', '二', '三', '四', '五', '六'] 中的某一个，本 demo 结果为 五 
输入例子:
formatDate(new Date(1409894060000), 'yyyy-MM-dd HH:mm:ss 星期w')

输出例子:
2014-09-05 13:14:20 星期五



方法一, 分组替换
function formatDate(t,str){  

var obj = {
    yyyy:t.getFullYear(),
    yy:(""+ t.getFullYear()).slice(-2),
    M:t.getMonth()+1,
    MM:("0"+ (t.getMonth()+1)).slice(-2),
    d:t.getDate(),
    dd:("0" + t.getDate()).slice(-2),
    H:t.getHours(),
    HH:("0" + t.getHours()).slice(-2),
    h:t.getHours() % 12,
    hh:("0"+t.getHours() % 12).slice(-2),
    m:t.getMinutes(),
    mm:("0" + t.getMinutes()).slice(-2),
    s:t.getSeconds(),
    ss:("0" + t.getSeconds()).slice(-2),
    w:['日', '一', '二', '三', '四', '五', '六'][t.getDay()]  
};  
return str.replace(/([a-z]+)/ig,function($1){return obj[$1]});}

方法二，
function formatDate(oDate, sFormation) {
    var weeks=['日', '一', '二', '三', '四', '五', '六'];
    var res;
    
    var yy=oDate.getFullYear(),
        mth=oDate.getMonth()+1,
        dd=oDate.getDate(),
        hh=oDate.getHours(),
    	mm=oDate.getMinutes(),
        ss=oDate.getSeconds(),
    	ww=oDate.getDay();
    
   //格式化日期，补位
    var dFormat=function(date,format){
			return format.length==2 && date<10?'0'+date:date;
	     };

    res=sFormation.replace(/(y{2}){1,2}/,function(y){
                    y=y.length==2?yy.toString().slice(2):yy;
                    return y;
                })
                .replace(/M{1,2}/,function(M){
                    return dFormat(mth,M);
                })
                .replace(/d{1,2}/,function(d){
                    return dFormat(dd,d);
                })
    			.replace(/[hH]{1,2}/,function(h){
 					if(h.indexOf('h')!=-1 && hh>12){
        				hh=hh-12;
    				}
    				return dFormat(hh,h);
    			})
    			.replace(/m{1,2}/,function(m){
                  	return dFormat(mm,m);  
                })
    			.replace(/s{1,2}/,function(s){
                    return dFormat(ss,s);
                })
    			.replace(/[w]/,function(w){
                    return weeks[ww];
                });
    return res; 
    
}

//分组查找
'yyyy-MM-dd HH:mm:ss'.replace(/[a-z]+/g,function($1){return 'test'});

// 数组indexOf方法 配合 lastIndexOf方法查找重复项，并输出重复项 	
function duplicates(arr) {
    var res=[];
    arr.forEach(function(item){
        if(arr.indexOf(item)!==arr.lastIndexOf(item) && res.indexOf(item)==-1){
            res.push(item);
        }
    })
    return res;
}	
	
//计时器
题目描述
实现一个打点计时器，要求
1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1
2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作
3、第一个数需要立即输出

function count(start, end) {
    console.log(start++);
	var timer=setInterval(function(){
        if(start<=end){
        	console.log(start++);    
        } else {
            clearInterval(timer);
        }
    },100);
    
    return {
        cancel:function(){clearInterval(timer);} 
    };
}

//函数传参
将数组 arr 中的元素作为调用函数 fn 的参数 
输入例子:
argsAsArray(function (greeting, name, punctuation) {return greeting + ', ' + name + (punctuation || '!');}, ['Hello', 'Ellie', '!'])

输出例子:
Hello, Ellie!

function argsAsArray(fn, arr) {
	return fn.apply(this,arr);
}

//改变函数的执行上下文 apply/call
题目描述
将函数 fn 的执行上下文改为 obj 对象 
输入例子:
speak(function () {return this.greeting + ', ' + this.name + '!!!';}, {greeting: 'Hello', name: 'Rebecca'})

输出例子:
Hello, Rebecca!!!

function speak(fn, obj) {
	return fn.call(obj);
}


//返回函数
实现函数 functionFunction，调用之后满足如下条件：
1、返回值为一个函数 f
2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 ', '
3、所有函数的参数数量为 1，且均为 String 类型 
输入例子:
functionFunction('Hello')('world')

输出例子:
Hello, world

function functionFunction(str) {
	var f=function(e){
        return str+', '+e;
    }；
    return f;
}

//使用闭包
题目描述
实现函数 makeClosures，调用之后满足如下条件：
1、返回一个函数数组 result，长度与 arr 相同
2、运行 result 中第 i 个函数，即 result[i]()，结果与 fn(arr[i]) 相同 
输入例子:
var arr = [1, 2, 3]; 
var square = function (x) { 
	return x * x; 
}; 
var funcs = makeClosures(arr, square); 
funcs[1]();

function makeClosures(arr, fn) {
	var result=[];
    for(var i=0,l=arr.length;i<l;i++){
        (function(i){
            result.push(
                function(){
                    return fn.call(null,arr[i])
                });
        })(i);
    }
    return result; 
}

题目描述
已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件：
1、返回一个函数 result，该函数接受一个参数
2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致 
输入例子:
var sayIt = function(greeting, name, punctuation) {     return greeting + ', ' + name + (punctuation || '!'); };  partial(sayIt, 'Hello', 'Ellie')('!!!');

输出例子:
Hello, Ellie!!!

function partial(fn, str1, str2) {
    var result=function(str){
        return fn.call(this,str1,str2,str);//固定执行三个参数，
        所以可以用call方法直接传入
    };
    return result;  
}
var a = 1; var b = 2; 
var test = function (first, second) { 
	return first === a && second === b;
}; 
callIt(test, a, b);

实现函数 partialUsingArguments，调用之后满足如下条件：
1、返回一个函数 result
2、调用 result 之后，返回的结果与调用函数 fn 的结果一致
3、fn 的调用参数为 partialUsingArguments 的第一个参数之后的全部参数以及 result 的调用参数 
输入例子:
var a = 1; var b = 2; var c = 3; var d = 4;var test = function (first, second, third, forth) {return first + second + third + forth;};partialUsingArguments(test, a, b)(c, d);

输出例子:
10

function partialUsingArguments(fn) {
    var arrs=Array.prototype.slice.call(arguments,1);
    var res=function(){
        return fn.apply(this,arrs.concat([].slice.call(arguments)));//用concat方法链接参数
    };
    return res;
}

字符串获取指定位置的字符有以下两种方法：
string[index];
string.charAt(index);



题目描述
将给定数字转换成二进制字符串。如果字符串长度不足 8 位，则在前面补 0 到满8位。 
输入例子:
convertToBinary(65)

输出例子:
01000001
=========================================================================

function convertToBinary(num) {
	var s=num.toString(2);
    var l=s.length;
    //return l<8?'0'.repeat(8-l)+s:s; repeat方法存在兼容性问题，  
    return l<8?(Math.pow(10, 8-l).toString().substring(1))+s:s;
}


题目描述
求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题 
输入例子:
multiply(3, 0.0001)

输出例子:
0.0003
===========================================================================
思路：
1.先将浮点数转换为整数再除以之前成的倍数。

function multiply(a, b) {
	var intNum=function(e){
        if(e.toString().indexOf('.')!==-1){
           return e.toString().split('.')[1].length; 
        } else {
            return 0;
        } 
    };
    
    var a1=a*Math.pow(10,intNum(a));
    var b1=b*Math.pow(10,intNum(b));
    
    return a1*b1/Math.pow(10,intNum(a)+intNum(b));
}



